// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Flight {
  id          Int         @id @default(autoincrement())
  name        String
  date        DateTime
  description String?
  logPath     String? // 로그 파일 경로
  telemetry   Telemetry[]
  videos      Video[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Telemetry {
  id            Int      @id @default(autoincrement())
  timeFromStart Int // milliseconds
  timestamp     DateTime // UTC
  latitude      Float
  longitude     Float
  altitude      Float // meters
  heading       Float // degrees
  isVideo       Boolean // 비디오 촬영 여부
  flight        Flight   @relation(fields: [flightId], references: [id], onDelete: Cascade)
  flightId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([flightId, timeFromStart])
}

model Video {
  id          Int      @id @default(autoincrement())
  name        String
  width       Int
  height      Int
  fps         Float
  totalFrames Int
  filePath    String // 비디오 파일 경로
  flight      Flight   @relation(fields: [flightId], references: [id], onDelete: Cascade)
  flightId    Int
  frames      Frame[]
  objects     Object[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([flightId])
}

model Frame {
  id         Int      @id @default(autoincrement())
  frameIndex Int
  timestamp  DateTime // UTC
  latitude   Float?
  longitude  Float?
  altitude   Float? // meters
  heading    Float? // degrees
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  objects    Object[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([videoId, frameIndex])
  @@index([videoId, frameIndex])
}

model Object {
  id            Int      @id @default(autoincrement())
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId       Int
  frame         Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
  frameId       Int
  trackingId    Int // tracking ID 객체의 고유 식별자
  bbox          String // [x1, y1, x2, y2] JSON string
  confidence    Float // 객체 검출 신뢰도
  classId       Int // 객체 클래스 ID
  pixelSpeed    Float? // pixels per second
  groundSpeed   Float? // meters per second
  latitude      Float? // 객체의 추정 위도
  longitude     Float? // 객체의 추정 경도
  courseHeading Float? // degrees from north
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([videoId, frameId])
  @@index([trackingId])
}
